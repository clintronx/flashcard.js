{
	"create array":{
		"back" : "var list = [];\nvar anotherList = new Array();"
	},
	"2d array":{
		"back" : "var list = [['a','b'],['c','d']];\nconsole.log(list[0][0]); //a"
	},
	"array properties":{
		"back" : "constructor -\tSpecifies the function that creates an object's prototype.\nlength -\tReflects the number of elements in an array."
	},
	"js array mutator methods":{
		"back" : "pop -\tRemoves the last element from an array and returns that element.\npush -\tAdds one or more elements to the end of an array and returns the new length of the array.\nreverse -\tReverses the order of the elements of an array -- the first becomes the last, and the last becomes the first.\nshift -\tRemoves the first element from an array and returns that element.\nsort -\tSorts the elements of an array.\nsplice -\tAdds and/or removes elements from an array.\nunshift -\tAdds one or more elements to the front of an array and returns the new length of the array."
	},
	"js array accessor methods":{
		"back" : "concat -\tReturns a new array comprised of this array joined with other array(s) and/or value(s).\njoin -\tJoins all elements of an array into a string.\nslice -\tExtracts a section of an array and returns a new array.\ntoSource Non-standard -\tReturns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.prototype.toSource method.\ntoString -\tReturns a string representing the array and its elements. Overrides the Object.prototype.toString method.\nindexOf Requires JavaScript 1.6 -\tReturns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.\nlastIndexOf Requires JavaScript 1.6 -\tReturns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found."
	},
	"js array iteration methods":{
		"back" : "forEach Requires JavaScript 1.6 -\tCalls a function for each element in the array.\nevery Requires JavaScript 1.6 -\tReturns true if every element in this array satisfies the provided testing function.\nsome Requires JavaScript 1.6 -\tReturns true if at least one element in this array satisfies the provided testing function.\nfilter Requires JavaScript 1.6 -\tCreates a new array with all of the elements of this array for which the provided filtering function returns true.\nmap Requires JavaScript 1.6 -\tCreates a new array with the results of calling a provided function on every element in this array.\nreduce Requires JavaScript 1.8 -\tApply a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value.\nreduceRight Requires JavaScript 1.8 -\tApply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value."
	},
	"Array generic methods":{
		"back" : "to apply array methods to strings or other array-like objects (such as function arguments).\nBy doing this, you treat a string as an array of characters (or otherwise treat a non-array as an array).\nfunction isLetter(character) {\n\treturn (character >= \"a\" && character <= \"z\");\n}\nif (Array.prototype.every.call(str, isLetter))\nalert(\"The string '\" + str + \"' contains only letters!\");"
	},
	"using splice":{
		"back" : "var myFish = [\"angel\", \"clown\", \"mandarin\", \"surgeon\"];\n//removes 0 elements from index 2, and inserts \"drum\"\nvar removed = myFish.splice(2, 0, \"drum\");\n//myFish is [\"angel\", \"clown\", \"drum\", \"mandarin\", \"surgeon\"]\n//removed is [], no elements removed\n//removes 1 element from index 3\nremoved = myFish.splice(3, 1);\n//myFish is [\"angel\", \"clown\", \"drum\", \"surgeon\"]\n//removed is [\"mandarin\"]\n//removes 1 element from index 2, and inserts \"trumpet\"\nremoved = myFish.splice(2, 1, \"trumpet\");\n//myFish is [\"angel\", \"clown\", \"trumpet\", \"surgeon\"]\n//removed is [\"drum\"]\n//removes 2 elements from index 0, and inserts \"parrot\", \"anemone\" and \"blue\"\nremoved = myFish.splice(0, 2, \"parrot\", \"anemone\", \"blue\");\n//myFish is [\"parrot\", \"anemone\", \"blue\", \"trumpet\", \"surgeon\"]\n//removed is [\"angel\", \"clown\"]"
	},
	"array concat":{
		"back" : "The following code concatenates two arrays:\nvar alpha = [\"a\", \"b\", \"c\"];\nvar numeric = [1, 2, 3];\n// creates array [\"a\", \"b\", \"c\", 1, 2, 3]; alpha and numeric are unchanged\nvar alphaNumeric = alpha.concat(numeric);\nExample: Concatenating three arrays\nThe following code concatenates three arrays:\nvar num1 = [1, 2, 3];\nvar num2 = [4, 5, 6];\nvar num3 = [7, 8, 9];\n// creates array [1, 2, 3, 4, 5, 6, 7, 8, 9]; num1, num2, num3 are unchanged\nvar nums = num1.concat(num2, num3);"
	},
	"array unshift":{
		"back" : "Adds one or more elements to the beginning of an array and returns the new length of the array.\n\nvar arr = [1, 2];\narr.unshift(0); //result of call is 3, the new array length\n//arr is [0, 1, 2]\narr.unshift(-2, -1); // = 5\n//arr is [-2, -1, 0, 1, 2]\narr.unshift( [-3] );\n//arr is [[-3], -2, -1, 0, 1, 2]"
	},
	"array shift":{
		"back" : "Removes the first element from an array and returns that element. This method changes the length of the array.\n\n// assumes a println function is defined\nvar myFish = [\"angel\", \"clown\", \"mandarin\", \"surgeon\"];\nprintln(\"myFish before: \" + myFish);\nvar shifted = myFish.shift();\nprintln(\"myFish after: \" + myFish);\nprintln(\"Removed this element: \" + shifted);\nThis example displays the following:\nmyFish before: angel,clown,mandarin,surgeon\nmyFish after: clown,mandarin,surgeon\nRemoved this element: angel"
	},
	"Function.prototype.call":{
		"back" : "Calls a function with a given this value and arguments provided individually.\nWith call, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object."
	},
	"Using call to chain constructors for an object":{
		"back" : "You can use call to chain constructors for an object, similar to Java.\nIn the following example, the constructor for the Product object is defined with two parameters, name and price.\nTwo other functions Food and Toy invoke Product passing this and name and price.\nProduct initializes the properties name and price, both specialized functions define the category.\n\nfunction Product(name, price) {\nthis.name = name;\nthis.price = price;\nif (price < 0)\n\tthrow RangeError('Cannot create product \"' + name + '\" with a negative price');\n\treturn this;\n}\nfunction Food(name, price) {\n\tProduct.call(this, name, price);\n\tthis.category = 'food';\n}\nFood.prototype = new Product();\nfunction Toy(name, price) {\n\tProduct.call(this, name, price);\n\tthis.category = 'toy';\n}\nToy.prototype = new Product();\nvar cheese = new Food('feta', 5);\nvar fun = new Toy('robot', 40);"
	},
	"Function.prototype.apply":{
		"back" : "Calls a function with a given this value and arguments provided as an array (or an array like object).\n\n/* min/max number in an array */\nvar numbers = [5, 6, 2, 3, 7];\n\n/* using Math.min/Math.max apply */\nvar max = Math.max.apply(null, numbers); /* This about equal to Math.max(numbers[0], ...) or Math.max(5, 6, ..) */\nvar min = Math.min.apply(null, numbers);"
	},
	"keys":{
		"back" : "Object.keys(obj)\nReturns an array of a given object's own enumerable properties, in the same order as that provided by a for-in loop\n(the difference being that a for-in loop enumerates properties in the prototype chain as well).\n\nvar arr = [\"a\", \"b\", \"c\"];alert(Object.keys(arr)); // will alert \"0,1,2\"\n\n// array like object\nvar obj = { 0 : \"a\", 1 : \"b\", 2 : \"c\"};\nalert(Object.keys(obj)); // will alert \"0,1,2\""
	},
	"key events":{
		"back" : "keyup -\tThe keyup event is fired when a key is released.\nkeydown -\tThe keydown event is fired when a key is pressed down.\n"
	}

}